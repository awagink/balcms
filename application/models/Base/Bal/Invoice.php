<?php

/**
 * Base_Bal_Invoice
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $code
 * @property string $title
 * @property string $template
 * @property enum $status
 * @property array $config
 * @property string $currency_code
 * @property timestamp $paid_at
 * @property enum $payment_status
 * @property decimal $payment_fee
 * @property string $payment_error
 * @property enum $weight_unit
 * @property decimal $price_all_total
 * @property decimal $price_all_total_d
 * @property decimal $price_all_total_dhs
 * @property decimal $price_total
 * @property decimal $handling_all_total
 * @property decimal $tax_all_total
 * @property decimal $weight_all_total
 * @property decimal $discount_all_total
 * @property decimal $shipping_all_total
 * @property integer $File_id
 * @property integer $UserFor_id
 * @property integer $UserFrom_id
 * @property File $File
 * @property User $UserFor
 * @property User $UserFrom
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Base_Bal_Invoice extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('bal__invoice');
        $this->hasColumn('id', 'integer', 2, array(
             'type' => 'integer',
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             'length' => '2',
             ));
        $this->hasColumn('code', 'string', 30, array(
             'type' => 'string',
             'notblank' => true,
             'unique' => true,
             'length' => '30',
             ));
        $this->hasColumn('title', 'string', 50, array(
             'type' => 'string',
             'notblank' => true,
             'length' => '50',
             ));
        $this->hasColumn('template', 'string', 50, array(
             'type' => 'string',
             'notblank' => true,
             'default' => 'user_invoice',
             'extra' => 
             array(
              'auto' => true,
             ),
             'length' => '50',
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'pending',
              1 => 'published',
              2 => 'completed',
             ),
             'notblank' => true,
             'default' => 'published',
             ));
        $this->hasColumn('config', 'array', null, array(
             'type' => 'array',
             ));
        $this->hasColumn('currency_code', 'string', 3, array(
             'type' => 'string',
             'length' => '3',
             ));
        $this->hasColumn('paid_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('payment_status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'awaiting',
              1 => 'created',
              2 => 'pending',
              3 => 'refunded',
              4 => 'processed',
              5 => 'completed',
              6 => 'canceled_reversal',
              7 => 'denied',
              8 => 'expired',
              9 => 'failed',
              10 => 'voided',
              11 => 'reversed',
             ),
             'notblank' => true,
             'default' => 'awaiting',
             ));
        $this->hasColumn('payment_fee', 'decimal', 8, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             'default' => 0,
             'extra' => 
             array(
              'currency' => true,
             ),
             'length' => '8',
             ));
        $this->hasColumn('payment_error', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('weight_unit', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'kgs',
              1 => 'lbs',
             ),
             'default' => 'kgs',
             'notblank' => true,
             ));
        $this->hasColumn('price_all_total', 'decimal', 8, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             'extra' => 
             array(
              'currency' => true,
             ),
             'length' => '8',
             ));
        $this->hasColumn('price_all_total_d', 'decimal', 8, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             'extra' => 
             array(
              'currency' => true,
             ),
             'length' => '8',
             ));
        $this->hasColumn('price_all_total_dhs', 'decimal', 8, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             'extra' => 
             array(
              'currency' => true,
             ),
             'length' => '8',
             ));
        $this->hasColumn('price_total', 'decimal', 8, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             'extra' => 
             array(
              'currency' => true,
             ),
             'length' => '8',
             ));
        $this->hasColumn('handling_all_total', 'decimal', 8, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             'extra' => 
             array(
              'currency' => true,
             ),
             'length' => '8',
             ));
        $this->hasColumn('tax_all_total', 'decimal', 8, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             'extra' => 
             array(
              'currency' => true,
             ),
             'length' => '8',
             ));
        $this->hasColumn('weight_all_total', 'decimal', 8, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             'extra' => 
             array(
              'currency' => true,
             ),
             'length' => '8',
             ));
        $this->hasColumn('discount_all_total', 'decimal', 8, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             'extra' => 
             array(
              'currency' => true,
             ),
             'length' => '8',
             ));
        $this->hasColumn('shipping_all_total', 'decimal', 8, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             'extra' => 
             array(
              'currency' => true,
             ),
             'length' => '8',
             ));
        $this->hasColumn('File_id', 'integer', 2, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '2',
             ));
        $this->hasColumn('UserFor_id', 'integer', 2, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '2',
             ));
        $this->hasColumn('UserFrom_id', 'integer', 2, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '2',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('File', array(
             'local' => 'File_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('User as UserFor', array(
             'local' => 'UserFor_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('User as UserFrom', array(
             'local' => 'UserFrom_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}