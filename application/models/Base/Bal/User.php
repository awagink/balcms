<?php

/**
 * Base_Bal_User
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $username
 * @property string $password
 * @property string $displayname
 * @property string $title
 * @property string $firstname
 * @property string $lastname
 * @property string $fullname
 * @property string $email
 * @property string $phone
 * @property string $description
 * @property integer $level
 * @property string $subscriptions
 * @property string $code
 * @property string $uid
 * @property enum $type
 * @property enum $status
 * @property integer $avatar_id
 * @property Media $Avatar
 * @property Doctrine_Collection $Permissions
 * @property Doctrine_Collection $Roles
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class Base_Bal_User extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('bal__user');
        $this->hasColumn('id', 'integer', 2, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => '2',
             ));
        $this->hasColumn('username', 'string', 16, array(
             'type' => 'string',
             'notblank' => true,
             'unique' => true,
             'length' => '16',
             ));
        $this->hasColumn('password', 'string', 33, array(
             'type' => 'string',
             'notblank' => true,
             'extra' => 
             array(
              'password' => true,
             ),
             'length' => '33',
             ));
        $this->hasColumn('displayname', 'string', 85, array(
             'type' => 'string',
             'notblank' => true,
             'length' => '85',
             ));
        $this->hasColumn('title', 'string', 15, array(
             'type' => 'string',
             'length' => '15',
             ));
        $this->hasColumn('firstname', 'string', 35, array(
             'type' => 'string',
             'length' => '35',
             ));
        $this->hasColumn('lastname', 'string', 35, array(
             'type' => 'string',
             'length' => '35',
             ));
        $this->hasColumn('fullname', 'string', 85, array(
             'type' => 'string',
             'extra' => 
             array(
              'auto' => true,
             ),
             'length' => '85',
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'notblank' => true,
             'length' => '255',
             ));
        $this->hasColumn('phone', 'string', 255, array(
             'type' => 'string',
             'extra' => 
             array(
              'formOrder' => 320,
              'formGroup' => 'other',
             ),
             'length' => '255',
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('level', 'integer', 1, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'extra' => 
             array(
              'auto' => true,
             ),
             'length' => '1',
             ));
        $this->hasColumn('subscriptions', 'string', 255, array(
             'type' => 'string',
             'extra' => 
             array(
              'csv' => true,
             ),
             'length' => '255',
             ));
        $this->hasColumn('code', 'string', 33, array(
             'type' => 'string',
             'notblank' => true,
             'unique' => true,
             'extra' => 
             array(
              'auto' => true,
             ),
             'length' => '33',
             ));
        $this->hasColumn('uid', 'string', 33, array(
             'type' => 'string',
             'notblank' => true,
             'unique' => true,
             'extra' => 
             array(
              'auto' => true,
             ),
             'length' => '33',
             ));
        $this->hasColumn('type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'user',
             ),
             'notblank' => true,
             'default' => 'user',
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'pending',
              1 => 'published',
              2 => 'disabled',
             ),
             'notblank' => true,
             'default' => 'pending',
             ));
        $this->hasColumn('avatar_id', 'integer', 2, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '2',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Media as Avatar', array(
             'local' => 'avatar_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('Permission as Permissions', array(
             'refClass' => 'PermissionAndUser',
             'local' => 'user_id',
             'foreign' => 'permission_id'));

        $this->hasMany('Role as Roles', array(
             'refClass' => 'RoleAndUser',
             'local' => 'user_id',
             'foreign' => 'role_id'));

        $taggable0 = new Doctrine_Template_Taggable(array(
             'tagAlias' => 'SubscriptionTags',
             ));
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $bal_doctrine_template_addressable0 = new Bal_Doctrine_Template_Addressable();
        $this->actAs($taggable0);
        $this->actAs($softdelete0);
        $this->actAs($timestampable0);
        $this->actAs($bal_doctrine_template_addressable0);
    }
}