<?php

/**
 * Balcms_Content
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Balcms_Content extends Base_Balcms_Content
{

	/**
	 * Apply modifiers
	 * @return
	 */
	public function setUp ( ) {
		$this->hasMutator('Avatar', 'setAvatar');
		$this->hasMutator('position', 'setPosition');
		$this->hasMutator('path', 'setPath');
		$this->hasMutator('code', 'setCode');
		parent::setUp();
	}
	
	/**
	 * Set the User's Avatar
	 * @return string
	 */
	protected function setMediaAttachment ( $what, $value ) {
		# Prepare
		$Media = Media::fetch($value);
		
		# Apply Media
		if ( $Media === null || $Media ) {
			if ( isset($this->$what) ) {
				$this->$what->delete();
			}
			$this->_set($what, $Media ? $Media : null, false);
		}
		
		# Done
		return true;
	}
	
	/**
	 * Set the User's Avatar
	 * @return string
	 */
	public function setAvatar ( $value ) {
		return $this->setMediaAttachment('Avatar', $value);
	}
	
	/**
	 * Get's the content's crumbs
	 * @param const $hydrateMode [optional]
	 * @param bool $includeSelf [optional]
	 * @return mixed
	 */
	public function getCrumbs ( $hydrateMode = null, $includeSelf = true ) {
		# Prepare
		$Crumbs = array();
		$Crumb = $this;
		while ( $Crumb->parent_id ) {
			$Crumb = $Crumb->Parent;
			$Crumbs[] = Doctrine::HYDRATE_ARRAY ? $Crumb->toArray() : $Crumb;
		}
		
		# Include?
		if ( $includeSelf ) {
			$Crumbs[] = $hydrateMode === Doctrine::HYDRATE_ARRAY ? $this->toArray() : $this;
		}
		
		# Done
		return $Crumbs;
	}

	/**
	 * Sets the position
	 * @param int $position [optional] defaults to id
	 * @return bool
	 */
	public function setPosition ( $position = null, $load = true ) {
		# Default
		if ( !$this->position && is_null($position) && $this->id ) {
			$position = $this->id;
		}
		
		# Is Change?
		if ( $this->position != $position && $position ) {
			$this->_set('position', $position, $load);
			return true;
		}
		
		# No Change
		return false;
	}

	/**
	 * Sets the code field
	 * @param int $code
	 * @return bool
	 */
	public function setCode ( $code, $load = true ) {
		$code = strtolower($code);
		$code = preg_replace('/[\s_]/', '-', $code);
		$code = preg_replace('/[^-a-z0-9]/', '', $code);
		$code = preg_replace('/--+/', '-', $code);
		$this->_set('code', $code, $load);
		$this->setPath();
		return true;
	}
	
	/**
	 * Sets the Route's path field
	 * @param int $path [optional]
	 * @return bool
	 */
	public function setPath ( $path = null, $load = true ) {
		# Prepare
		$save = false;
		# Default
		if ( is_null($path) ) {
			$path = $this->code;
			if ( $this->parent_id )
				$path = trim($this->Parent->Route->path,'/') . '/' . trim($path,'/');
		}
		$path = trim($path, '/');
		if ( empty($path) ) {
			return false;
		}
		# Update
		if ( $this->route_id ) {
			$Route = $this->Route;
		} else {
			$Route = new Route();
			$Route->type = 'content';
			$Route->data = array('id' => $this->id);
			$this->Route = $Route;
			$save = true;
		}
		# Apply
		if ( $Route->path != $path ) {
			$Route->path = $path;
			$Route->save();
			# Update Children
			$Children = $this->Children;
			foreach ( $Children as $Child ) {
				$Child->setPath($path.'/'.$Child->code);
			}
		}
		# Done
		return $save;
	}
	
	/**
	 * Ensure the Render of the Content and Description
	 * @param Doctrine_Event $Event
	 * @return bool
	 */
	public function ensureRender ( $Event ) {
		# Prepare
		$View = Bal_App::getView();
		$Content = $Event->getInvoker();
		$modified = $Content->getModified();
		$save = false;
		
		# Content
		if ( array_key_exists('content', $modified) ) {
			$this->content_rendered = $View->content()->renderContent($Content->content, array('Content'=>$Content));
			$save = true;
		}
		
		# Description
		if ( array_key_exists('description', $modified) ) {
			$this->description_rendered = $View->content()->renderDescription($Content->description, array('Content'=>$Content));
			$save = true;
		}
		
		return $save;
	}
	
	/**
	 * Ensure Tags
	 * @param Doctrine_Event $Event
	 * @return bool
	 */
	public function ensureContentTags ( $Event ) {
		# Prepare
		$Invoker = $Event->getInvoker();
		$modified = $Invoker->getModified();
		$modifiedLast = $Invoker->getLastModified();
		$save = false;
		$tagField = 'tags';
		$tagRelation = 'ContentTags';
		$tagRelationNames = $tagRelation.'Names';
		
		# Fetch
		$tagsSystemOrig = $Invoker->$tagRelationNames;
		$tagsUserOrig = $Invoker->_get($tagField);
		$tagsSystem = prepare_csv_str($tagsSystemOrig);
		$tagsUser = prepare_csv_str($tagsUserOrig);
		$tagsUserNewer = array_key_exists($tagField, $modified);
		$tagsSystemNewer = !array_key_exists($tagField, $modified) && !array_key_exists($tagField, $modifiedLast);
		$tagsDiffer = $tagsUser != $tagsSystem;
		
		# TagField > TagField
		if ( ($tagsDiffer || $tagsUserOrig != $tagsUser) && $tagsUserNewer ) {
			# TagField is newer than TagRelation
			//var_dump('TagField > TagField');
			
			# Save TagField
			$Invoker->_set($tagField, $tagsUser, false); // false at end to prevent comparison
			
			# Save
			$save = true;
		}
		
		# TagField > TagRelation
		if ( $tagsDiffer && !$tagsSystemNewer ) {
			# TagField is newer than TagRelation
			//var_dump('TagField > TagRelation');
			
			# Check whether we can save
			if ( $Invoker->id ) {
				# Save TagRelation
				$Invoker->$tagRelation = $tagsUser;
				
				# Save
				$save = true;
			}
		}
		
		# TagRelation > $TagField
		if ( $tagsDiffer && $tagsSystemNewer ) {
			# TagRelation is newer than TagField
			//var_dump('TagRelation > TagField');
			
			# Save TagField
			$Invoker->_set($tagField, $tagsSystem, false); // false at end to prevent comparison
			
			# Save
			$save = true;
		}
		
		# Return
		return $save;
	}
	
	/**
	 * Get Subscribers Query
	 * @param constant $hydrateMode
	 * @param Doctrine_Query $SubscriberQuery
	 */
	public function getSubscribersQuery ( $hydrateMode = null ) {
		$tags = $this->ContentTagsNames;
		$SubscribersQuery = Doctrine_Query::create()->select('u.*')->from('User u, u.SubscriptionTags uSubscription')->where('u.status = ?', 'published')->andWhereIn('uSubscription.name', $tags);
		if ( empty($tags) ) {
			$SubscribersQuery->andWhere('true = false');
		}
		if ( !is_null($hydrateMode) ) {
			$SubscribersQuery->setHydrationMode($hydrateMode);
		}
		return $SubscribersQuery;
	}
	
	/**
	 * Get Unsent Subscribers Query
	 * @param constant $hydrateMode
	 * @param Doctrine_Query $SubscriberQuery
	 */
	public function getUnsentSubscribersQuery ( $hydrateMode = null ) {
		$SubscribersQuery = $this->getSubscribersQuery($hydrateMode);
		$SubscribersQuery->andWhere('NOT EXISTS (SELECT m.id FROM Message m WHERE m.For.id = u.id AND m.Content.id = ?)', $this->id);
		return $SubscribersQuery;
	}
	
	/**
	 * Get Subscribers
	 * @param constant $hydrateMode
	 * @param Doctrine_Query $SubscriberQuery
	 */
	public function getSubscribers ( $hydrateMode = null ) {
		$SubscribersArray = array();
		if ( $this->id ) {
			$SubscribersQuery = $this->getSubscribersQuery($hydrateMode);
			$SubscribersArray = $SubscribersQuery->execute();
		}
		return $SubscribersArray;
	}
	
	/**
	 * Get Unsent Subscribers
	 * @param constant $hydrateMode
	 * @param Doctrine_Query $SubscriberQuery
	 */
	public function getUnsentSubscribers ( $hydrateMode = null ) {
		$SubscribersArray = array();
		if ( $this->id ) {
			$SubscribersQuery = $this->getUnsentSubscribersQuery($hydrateMode);
			$SubscribersArray = $SubscribersQuery->execute();
		}
		return $SubscribersArray;
	}
	
	/**
	 * Ensure Send out to Subscribers
	 * @param Doctrine_Event $Event
	 * @return boolean	wheter or not to save
	 */
	public function ensureSend ( $Event ) {
		# Prepare
		$Invoker = $Event->getInvoker();
		$modified = $Invoker->getLastModified();
		$save = false;
		
		# Subscription Message
		if ( $this->status === 'published' && array_key_exists('content_rendered', $modified) ) {
			# Update Message
			$Receivers = $this->getUnsentSubscribers();
			foreach ( $Receivers as $Receiver ) {
				$Message = new Message();
				$Message->For = $Receiver;
				$Message->Content = $Invoker;
				$Message->useTemplate('content-subscription');
				$Message->save();
			}
		}
		
		# Return
		return $save;
	}
	
	
	/**
	 * Ensure Consistency
	 * @param Doctrine_Event $Event
	 * @return boolean	wheter or not to save
	 */
	public function ensure ( $Event ) {
		$ensure = array(
			$this->setPosition(),
			$this->setPath(),
			$this->ensureContentTags($Event),
			$this->ensureRender($Event),
			$this->ensureSend($Event),
		);
		return in_array(true,$ensure);
	}
	
	/**
	 * Backup old values
	 * @param Doctrine_Event $Event
	 */
	public function preSave ( $Event ) {
		# Prepare
		$Invoker = $Event->getInvoker();
		$save = false;
		$result = true;
		
		# Ensure
		if ( $Invoker->ensure($Event) ) {
			$save = true;
		}
		
		# Done
		return method_exists(get_parent_class($this),$parent_method = __FUNCTION__) ? parent::$parent_method($Event) : $result;
	}
	
	/**
	 * Ensure
	 * @param Doctrine_Event $Event
	 * @return string
	 */
	public function postSave ( $Event ) {
		# Prepare
		$Invoker = $Event->getInvoker();
		$save = false;
		$result = true;
	
		# Ensure
		if ( $Invoker->ensure($Event) ) {
			$save = true;
		}
		
		# Apply
		if ( $save ) {
			$Invoker->save();
		}
		
		# Done
		return method_exists(get_parent_class($this),$parent_method = __FUNCTION__) ? parent::$parent_method($Event) : $result;
	}

	/**
	 * Ensure Route id exists
	 * @param Doctrine_Event $Event
	 * @return string
	 */
	public function postInsert ( $Event ) {
		# Prepare
		$Invoker = $Event->getInvoker();
		$Route = $Invoker->Route;
		$result = true;
		
		# Ensure
		if ( !$Route->data['id'] ) {
			$data = $Route->data;
			$data['id'] = $Invoker->id;
			$Route->data = $data;
			$Route->save();
		}
		
		# Done
		return method_exists(get_parent_class($this),$parent_method = __FUNCTION__) ? parent::$parent_method($Event) : $result;
	}
	
}