<?php

/**
 * Content
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6365 2009-09-15 18:22:38Z jwage $
 */
class Content extends Base_Content {
	
	protected $_View = null;

	/**
	 * Apply modifiers
	 * @return
	 */
	public function setUp ( ) {
		$this->hasMutator('position', 'setPosition');
		$this->hasMutator('path', 'setPath');
		$this->hasMutator('content', 'setContent');
		$this->hasMutator('description', 'setDescription');
		$this->hasMutator('tagstr', 'setTagstr');
		$this->hasAccessor('tagarray', 'getTagArray');
		parent::setUp();
	}
	
	/**
	 * Get's the View object
	 * @return Zend_View
	 */
	public function getView ( ) {
		if ( empty($this->_view) ) {
			$Bootstrap = $GLOBALS['Application']->getBootstrap();
			$Bootstrap->bootstrap('presentation');
			$this->_View = $Bootstrap->getResource('view');
		}
		return $this->_View;
	}
	
	/**
	 * Get's the content's crumbs
	 * @param const $hydrateMode [optional]
	 * @param bool $includeSelf [optional]
	 * @return mixed
	 */
	public function getCrumbs ( $hydrateMode = null, $includeSelf = true ) {
		# Prepare
		$Crumbs = array();
		$Crumb = $this;
		while ( $Crumb->parent_id ) {
			$Crumb = $Crumb->Parent;
			$Crumbs[] = Doctrine::HYDRATE_ARRAY ? $Crumb->toArray() : $Crumb;
		}
		
		# Include?
		if ( $includeSelf ) {
			$Crumbs[] = $hydrateMode === Doctrine::HYDRATE_ARRAY ? $this->toArray() : $this;
		}
		
		# Done
		return $Crumbs;
	}

	/**
	 * Sets the position
	 * @param int $position [optional] defaults to id
	 * @return bool
	 */
	public function setPosition ( $position = null ) {
		# Default
		if ( !$this->position && is_null($position) && $this->id ) {
			$position = $this->id;
		}
		
		# Is Change?
		if ( $this->position != $position && $position ) {
			$this->_set('position', $position);
			return true;
		}
		
		# No Change
		return false;
	}

	/**
	 * Get's a tag array
	 * @return array
	 */
	public function getTagArray ( ) {
		$tags = array();
		if ( isset($this->Tags) ) {
			$tags = array();
			foreach ( $this->Tags as $Tag ) {
				$tags[] = $Tag->name;
			}
			sort($tags);
		}
		return $tags;
	}

	/**
	 * Sets the tagstr field
	 * @param int $value [optional]
	 * @return bool
	 */
	public function setTagstr ( $value = null ) {
		/# Default
		if ( is_null($value) ) {
			$tags = $this->getTagArray();
			$value = implode($tags, ', ');
		}
		# Is Change?
		if ( $this->tagstr != $value ) {
			$this->_set('tagstr', $value);
			return true;
		}
		# No Change
		return false;
	}
	
	/**
	 * Sets the content field
	 * @param int $code
	 * @return bool
	 */
	public function setContent ( $content ) {
		$View = $this->getView();
		$this->content_rendered = $View->content()->renderContent($content, array('Content'=>$this));
		$this->_set('content', $content);
		return true;
	}
	
	/**
	 * Sets the description field
	 * @param int $code
	 * @return bool
	 */
	public function setDescription ( $description ) {
		$View = $this->getView();
		$this->description_rendered = $View->content()->renderDescription($description, array('Content'=>$this));
		$this->_set('description', $description);
		return true;
	}
	
	/**
	 * Sets the Route's path field
	 * @param int $path [optional]
	 * @return bool
	 */
	public function setPath ( $path = null ) {
		# Prepare
		$save = false;
		# Default
		if ( is_null($path) ) {
			$path = $this->code;
			if ( $this->parent_id )
				$path = trim($this->Parent->Route->path,'/') . '/' . trim($path,'/');
		}
		$path = trim($path, '/');
		if ( empty($path) ) {
			return false;
		}
		# Update
		if ( $this->route_id ) {
			$Route = $this->Route;
		} else {
			$Route = new Route();
			$Route->type = 'content';
			$Route->data = array('id' => $this->id);
			$this->Route = $Route;
			$save = true;
		}
		# Apply
		if ( $Route->path != $path ) {
			$Route->path = $path;
			$Route->save();
			# Update Children
			$Children = $this->Children;
			foreach ( $Children as $Child ) {
				$Child->setPath($path.'/'.$Child->code);
			}
		}
		# Done
		return $save;
	}
	
	/**
	 * Ensure Consistency
	 * @return bool
	 */
	public function ensureConsistency(){
		# Prepare
		$save = false;
		
		# Tags
		if ( $this->setTagstr() ) {
			$save = true;
		}
		
		# Position
		if ( $this->setPosition() ) {
			$save = true;
		}
		
		# Route
		if ( $this->setPath() ) {
			$save = true;
		}
		
		# Send
		if ( $this->send() ) {
			$save = true;
		}
		
		# Done
		return $save;
	}

	/**
	 * Get Subscribers
	 * @param constant $hydrateMode
	 * @param Doctrine_Query $SubscriberQuery
	 */
	public function getSubscribers ( $hydrateMode = null, Doctrine_Query $SubscriberQuery = null ) {
		$SubscribersArray = array();
		$tags = $this->getTagArray();
		if ( is_null($SubscriberQuery) && $this->id && !empty($tags) ) {
			$SubscriberQuery = Doctrine_Query::create()->select('s.email')->from('Subscriber s, s.Tags st')->where('s.enabled = ?', true)->andWhere('NOT EXISTS (SELECT cas.id FROM ContentAndSubscriber cas WHERE cas.subscriber_id = s.id AND cas.content_id = ?)', $this->id)->andWhereIn('st.name', $tags);
			if ( !is_null($hydrateMode) ) {
				$SubscriberQuery->setHydrationMode($hydrateMode);
			}
			$SubscribersArray = $SubscriberQuery->execute();
		}
		return $SubscribersArray;
	}

	/**
	 * Send out to subscribers
	 */
	public function send ( ) {
		# Check if we can
		$tags = $this->getTagArray();
		if ( empty($tags) )
			return false;
			# We can
		$SubscribersArray = $this->getSubscribers(Doctrine::HYDRATE_ARRAY);
		if ( !empty($SubscribersArray) ) {
			# Get View
			$View = $this->getView();
			# Update
			if ( empty($this->send_at) ) {
				$this->send_at = date('Y-m-d H:i:s', time());
			}
			# We would like to send out
			$View = clone $View;
			$View->ContentArray = $this->toArray();
			$View->headTitle()->append($this->title);
			# Configure
			global $Application;
			$applicationConfig = Zend_Registry::get('applicationConfig');
			$Application->getBootstrap()->bootstrap('mail');
			# Mail
			$mail = $applicationConfig['mail'];
			$mail['subject'] = $this->title;
			$mail['html'] = $View->render('email/subscription.phtml');
			$mail['text'] = strip_tags($mail['html']);
			$Mail = new Zend_Mail();
			$Mail->setFrom($mail['from']['address'], $mail['from']['name']);
			# $Mail->addTo($mail['from']['address'], $mail['from']['name']);
			foreach ( $SubscribersArray as $SubscriberArray ) {
				$Mail->addBcc($SubscriberArray['email']);
				# Save send
				$ContentAndSubscriber = new ContentAndSubscriber();
				$ContentAndSubscriber->content_id = $this->id;
				$ContentAndSubscriber->subscriber_id = $SubscriberArray['id'];
				$ContentAndSubscriber->status = 'delivered';
				$ContentAndSubscriber->save();
			}
			$Mail->setSubject($mail['subject']);
			$Mail->setBodyText($mail['text']);
			$Mail->setBodyHtml($mail['html']);
			$Mail->send();
			# Update
			$this->send_finished_at = date('Y-m-d H:i:s', time());
			$this->send_status = 'completed';
			$this->send_all += count($SubscribersArray);
			$this->send_remaining = 0;
			return true;
		}
		return false;
	}
	
	/**
	 * Backup old values
	 * @param Doctrine_Event $Event
	 */
	public function preSave ( $Event ) {
		# Prepare
		$Invoker = $Event->getInvoker();
		$save = false;
		
		# Ensure
		if ( $Invoker->ensureConsistency() ) {
			$save = true;
		}
		
		# Done
		return true;
	}
	
	/**
	 * Handle tagstr, and code changes
	 * @param Doctrine_Event $Event
	 * @return string
	 */
	public function postSave ( $Event ) {
		# Prepare
		$Invoker = $Event->getInvoker();
		$save = false;
	
		# Ensure
		if ( $Invoker->ensureConsistency() ) {
			$save = true;
		}
		
		# Apply
		if ( $save ) {
			$Invoker->save();
		}
		
		# Done
		return true;
	}

	/**
	 * Ensure Route id exists
	 * @param Doctrine_Event $Event
	 * @return string
	 */
	public function postInsert ( $Event ) {
		# Prepare
		$Invoker = $Event->getInvoker();
		$Route = $Invoker->Route;
		
		# Ensure
		if ( !$Route->data['id'] ) {
			$data = $Route->data;
			$data['id'] = $Invoker->id;
			$Route->data = $data;
			$Route->save();
		}
		
		# Done
		return true;
	}
	
}