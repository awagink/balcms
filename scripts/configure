#!/usr/bin/env php
<?php

class Cli {
	
	function __construct ( ) {
		# Prepare
		require(dirname(__FILE__).'/bootstrapr.php');
		$Bootstrapr->bootstrap('environment');
		
		# Install
		$this->configure();
	}
	
	function escape ( $input ) {
		return preg_replace('/([\\\\\\/$])/','\\\\${1}',$input);
	}
	
	function configure ( ) {
		# Prepare
		echo "Welcome to the BalCMS Installer.\n\n";
		
		# --------------------------
		
		# Common Path
		if ( !defined('COMMON_PATH') ) {
			# Common Path
			echo "Error: You have not specified a common path... This should have been set already..."."\n";
			exit;
		}
		
		# Adjust Common Path
		if ( !is_dir(COMMON_PATH) && !mkdir(COMMON_PATH) ) {
			echo "Error: Could not read the common directory: [".COMMON_PATH."]";
			exit;
		}
		
		# Prepare Config
		$balcms_path = APPLICATION_ROOT_PATH;
		$common_path = COMMON_PATH;
		$library_path = LIBRARY_PATH;
		
		
		# --------------------------
		
		# Prepare Resources
		$resourcesToInstall = array(
			array(
				'title'			=> 'BalPHP',
				'source'		=> 'git@github.com:balupton/balphp.git',
				'destination'	=> "${common_path}/balphp-v1.0",
				'command'		=> 'git clone',
				'branch'		=> 'v1.0',
				'symlinks'		=> array(
					array(
						'source'		=> "${common_path}/balphp-v1.0/lib/Bal",
						'destination'	=> "${library_path}/Bal"
					)
				)
			),
			array(
				'title'			=> 'CSScaffold',
				'source'		=> 'git@github.com:balupton/csscaffold.git',
				'destination'	=> "${common_path}/csscaffold",
				'command'		=> 'git svn clone'
			),
			array(
				'title'			=> 'Doctrine Extension Taggable',
				'source'		=> 'git@github.com:balupton/Doctrine-Extension-Taggable.git',
				'destination'	=> "${common_path}/doctrine-extensions/Taggable",
				'command'		=> 'git clone'
			),
			array(
				'title'			=> 'CSScaffold',
				'source'		=> 'git@github.com:balupton/CSScaffold.git',
				'destination'	=> "${common_path}/csscaffold",
				'command'		=> 'git clone'
			),
			array(
				'title'			=> 'Doctrine ORM',
				'source'		=> 'http://github.com/balupton/doctrine1',
				'destination'	=> "${common_path}/doctrine1",
				'command'		=> 'git clone',
				'symlinks'		=> array(
					array(
						'source'		=> "${common_path}/doctrine1/lib/Doctrine",
						'destination'	=> "${library_path}/Doctrine"
					),
					array(
						'source'		=> "${common_path}/doctrine1/lib/Doctrine.php",
						'destination'	=> "${library_path}/Doctrine.php"
					)
				)
			),
			array(
				'title'			=> 'HTML Purifier',
				'source'		=> 'git@github.com:balupton/htmlpurifier.git',
				'destination'	=> "${common_path}/htmlpurifier-v4.2.0-lib",
				'command'		=> 'git clone',
				'branch'		=> 'v4.2.0'
			),
			array(
				'title'			=> 'Symfony YAML Components',
				'source'		=> 'http://svn.symfony-project.com/components/yaml/tags/RELEASE_1_0_3/lib',
				'destination'	=> "${common_path}/SymfonyComponents/YAML",
				'command'		=> 'svn export'
			),
			array(
				'title'			=> 'Zend Framework',
				'source'		=> 'http://framework.zend.com/svn/framework/standard/tags/release-1.10.7/library',
				'destination'	=> "${common_path}/zend-v1.10.7-lib",
				'command'		=> 'svn export',
				'symlinks'		=> array(
					array(
						'source'		=> "${common_path}/zend-v1.10.7-lib/Zend",
						'destination'	=> "${library_path}/Zend"
					)
				)
			)
		);
		
		# Prepare Symlinks
		$symlinksToInstall = array(
			array(
				'title'			=> 'BalPHP Models',
				'source'		=> "$balphp_path/lib/models",
				'destination'	=> APPLICATION_ROOT_PATH.'/application/models/Bal'
			)
		);
				
		# --------------------------
		
		# Setup Resources
		echo "\nDownloading the resources into [${common_path}].\n\n";
		foreach ( $resourcesToInstall as $resource ) {
			$title = $source = $destination = $command = $branch = null;
			$symlinks = array();
			extract($resource);
			// Check
			if ( is_file($destination) ) {
				unlink($destination);
			}
			// Apply
			if ( !is_dir($destination) ) {
				echo "Installing the Resource [{$title}] to [${destination}].\n\n";
				`${command} ${source} ${destination}`;
				if ( $branch ) {
					`cd ${destination} ; git checkout ${branch} ; cd ${balcms_path}`;
				}
			}
			else {
				echo "The Resource [{$title}] is already installed at [${destination}].\n\n";
			}
			// Symlinks
			foreach ( $symlinks as $symlink ) {
				if ( empty($symlink['title']) ) $symlink['title'] = $title;
				$symlinksToInstall[] = $symlink;
			}
		}
		
		# --------------------------
		
		# Setup Symlinks
		echo "Setting up necessary symlinks...\n\n";
		foreach ( $symlinksToInstall as $symlink ) {
			$title = $source = $destination = null;
			extract($symlink);
			if ( is_file($destination) ) {
				unlink($destination);
			}
			if ( !is_dir($destination) ) {
				echo "Installing the Symlink [{$title}] to [${destination}].\n\n";
				`ln -s ${source} ${destination}`;
			}
			else {
				echo "The Symlink [{$title}] is already installed at [${destination}].\n\n";
			}
		}
		
		# --------------------------
		
		# Open Url
		echo "Your BalCMS Installation is Now Configured.\n";
		// system("open ${root_url}${base_url}");
		
		# Return true
		return true;
	}
	
}

$Cli = new Cli();
